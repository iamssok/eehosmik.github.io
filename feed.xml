<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://iamssok.github.io/eehosmik.github.io//eehosmik.github.io/</id><title>Hey</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2024-07-04T15:40:44+09:00</updated> <author> <name>Kimsohee</name> <uri>https://iamssok.github.io/eehosmik.github.io//eehosmik.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://iamssok.github.io/eehosmik.github.io//eehosmik.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko" href="https://iamssok.github.io/eehosmik.github.io//eehosmik.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator> <rights> © 2024 Kimsohee </rights> <icon>/eehosmik.github.io//assets/img/favicons/favicon.ico</icon> <logo>/eehosmik.github.io//assets/img/favicons/favicon-96x96.png</logo> <entry><title></title><link href="https://iamssok.github.io/eehosmik.github.io//eehosmik.github.io/posts/2024-02-06-react-state/" rel="alternate" type="text/html" title="" /><published>2024-07-04T15:40:44+09:00</published> <updated>2024-07-04T15:36:43+09:00</updated> <id>https://iamssok.github.io/eehosmik.github.io//eehosmik.github.io/posts/2024-02-06-react-state/</id> <content src="https://iamssok.github.io/eehosmik.github.io//eehosmik.github.io/posts/2024-02-06-react-state/" /> <author> <name>Kimsohee</name> </author> <summary> ✨ State ⚡ useState 맨 처음 렌더링 될 때 초기 상태 값을 인수로 전달 받고, 최신 상태를 유지하는 값과 그 값을 업데이트 하는 함수를 반환한다. const [state, setState] = useState(initialState) import { useState } from "react"; function App() { const [counter, setCounter] = useState(0); const onClick = () =&amp;gt; setCounter(counter + 1); return ( &amp;lt;div&amp;gt; &amp;lt;h1&amp;gt;Total Clicks : {counter}&amp;lt;/h1&amp;gt; &amp;lt;button onCli... </summary> </entry> <entry><title>[React] React-Hook-Form</title><link href="https://iamssok.github.io/eehosmik.github.io//eehosmik.github.io/posts/react-hook-form/" rel="alternate" type="text/html" title="[React] React-Hook-Form" /><published>2024-02-20T00:00:00+09:00</published> <updated>2024-03-12T22:32:05+09:00</updated> <id>https://iamssok.github.io/eehosmik.github.io//eehosmik.github.io/posts/react-hook-form/</id> <content src="https://iamssok.github.io/eehosmik.github.io//eehosmik.github.io/posts/react-hook-form/" /> <author> <name>Kimsohee</name> </author> <category term="React" /> <summary> ✨ React Hook Form React 기반의 폼 관리 라이브러리로, 복잡한 폼을 간단하게 처리하고 상태 관리를 용이하게 해주는 도구이다. function App() { return null; } export default App; </summary> </entry> <entry><title>[React] Recoil</title><link href="https://iamssok.github.io/eehosmik.github.io//eehosmik.github.io/posts/react-recoil/" rel="alternate" type="text/html" title="[React] Recoil" /><published>2024-02-18T00:00:00+09:00</published> <updated>2024-07-01T15:20:44+09:00</updated> <id>https://iamssok.github.io/eehosmik.github.io//eehosmik.github.io/posts/react-recoil/</id> <content src="https://iamssok.github.io/eehosmik.github.io//eehosmik.github.io/posts/react-recoil/" /> <author> <name>Kimsohee</name> </author> <category term="React" /> <summary> ✨ Recoil React를 위한 상태관리 라이브러리 ⚡ RecoilRoot recoil을 사용하기 위해서는 사용하고자 하는 부모 컴포넌트에 &amp;lt;RecoilRoot&amp;gt;를 사용해야 한다. 보통 전역적으로 사용하기 때문에 루트 컴포넌트에 넣으면 좋다. // index.tsx import React from "react"; import ReactDOM from "react-dom"; import App from "./App"; import { RecoilRoot } from "recoil"; ReactDOM.render( &amp;lt;React.StrictMode&amp;gt; &amp;lt;RecoilRoot&amp;gt; &amp;lt;App /&amp;gt; &amp;lt;/RecoilRoot&amp;gt; ... </summary> </entry> <entry><title>[React] React-Query</title><link href="https://iamssok.github.io/eehosmik.github.io//eehosmik.github.io/posts/react-query/" rel="alternate" type="text/html" title="[React] React-Query" /><published>2024-02-16T00:00:00+09:00</published> <updated>2024-03-12T22:32:05+09:00</updated> <id>https://iamssok.github.io/eehosmik.github.io//eehosmik.github.io/posts/react-query/</id> <content src="https://iamssok.github.io/eehosmik.github.io//eehosmik.github.io/posts/react-query/" /> <author> <name>Kimsohee</name> </author> <category term="React" /> <summary> ✨ React-Query 서버 상태를 불러오고, 캐싱하며, 지속적으로 동기화하고 업데이트 하는 작업을 도와주는 라이브러리 기존의 복잡하고 장황한 코드가 필요한 데이터 불러오기 방식과 달리 컴포넌트 내부에서 간단하고 직관적으로 API를 사용할 수 있다. 캐싱을 통해 동일한 데이터에 대한 반복적인 비동기 데이터 호출을 방지하고, 이는 불필요한 API 콜을 줄여 서버에 대한 부담을 줄인다. 특정 데이터의 복사본을 저장하여 이후 동일한 데이터의 재접근 속도를 높이는 것을 캐싱(caching)이라고 한다. ⚡ useQuery const { isLoading, data } = useQuery(queryKey, queryFu) import { QueryClient, QueryC... </summary> </entry> <entry><title>[React] React-Router-Dom Hooks</title><link href="https://iamssok.github.io/eehosmik.github.io//eehosmik.github.io/posts/react-router-hooks/" rel="alternate" type="text/html" title="[React] React-Router-Dom Hooks" /><published>2024-02-15T00:00:00+09:00</published> <updated>2024-03-12T15:11:26+09:00</updated> <id>https://iamssok.github.io/eehosmik.github.io//eehosmik.github.io/posts/react-router-hooks/</id> <content src="https://iamssok.github.io/eehosmik.github.io//eehosmik.github.io/posts/react-router-hooks/" /> <author> <name>Kimsohee</name> </author> <category term="React" /> <summary> ✨ useParams 파라미터 값을 넘겨받을 수 있다. import { BrowserRouter, Switch, Route } from "react-router-dom"; import Coins from "./routes/Coins"; import Coin from "./routes/Coin"; function Router() { return &amp;lt;BrowserRouter&amp;gt; &amp;lt;Switch&amp;gt; &amp;lt;Route path="/:id"&amp;gt;&amp;lt;Coin /&amp;gt;&amp;lt;/Route&amp;gt; &amp;lt;Route path="/"&amp;gt;&amp;lt;Coins /&amp;gt;&amp;lt;/Route&amp;gt; &amp;lt;/Switch&amp;gt; &amp;lt;/BrowserRoter&amp;... </summary> </entry> </feed>
