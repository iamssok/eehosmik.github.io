[ { "title": null, "url": "/eehosmik.github.io/posts/2024-02-06-react-state/", "categories": "", "tags": "", "date": "2024-07-04 15:40:44 +0900", "snippet": "✨ State⚡ useState맨 처음 렌더링 될 때 초기 상태 값을 인수로 전달 받고, 최신 상태를 유지하는 값과 그 값을 업데이트 하는 함수를 반환한다. const [state, setState] = useState(initialState)import { useState } from \"react\";function App() { const [counter, setCounter] = useState(0); const onClick = () =&gt; setCounter(counter + 1); return ( &lt;div&gt; &lt;h1&gt;Total Clicks : {counter}&lt;/h1&gt; &lt;button onClick={onClick}&gt;Click Me&lt;/button&gt; &lt;/div&gt; );}export default App;" }, { "title": "[React] React-Hook-Form", "url": "/eehosmik.github.io/posts/react-hook-form/", "categories": "React", "tags": "react, react-hook-form", "date": "2024-02-20 00:00:00 +0900", "snippet": "✨ React Hook FormReact 기반의 폼 관리 라이브러리로, 복잡한 폼을 간단하게 처리하고 상태 관리를 용이하게 해주는 도구이다.function App() { return null;}export default App;" }, { "title": "[React] Recoil", "url": "/eehosmik.github.io/posts/react-recoil/", "categories": "React", "tags": "react, recoil, atom, selector, useRecoilState, useRecoilValue, useSetRecoilState", "date": "2024-02-18 00:00:00 +0900", "snippet": "✨ RecoilReact를 위한 상태관리 라이브러리⚡ RecoilRootrecoil을 사용하기 위해서는 사용하고자 하는 부모 컴포넌트에 &lt;RecoilRoot&gt;를 사용해야 한다. 보통 전역적으로 사용하기 때문에 루트 컴포넌트에 넣으면 좋다.// index.tsximport React from \"react\";import ReactDOM from \"react-dom\";import App from \"./App\";import { RecoilRoot } from \"recoil\";ReactDOM.render( &lt;React.StrictMode&gt; &lt;RecoilRoot&gt; &lt;App /&gt; &lt;/RecoilRoot&gt; &lt;/React.StrictMode&gt; document.getElementById('root'));⚡ Atom 데이터 상태의 단위이며, 업데이트와 구독이 가능하다. atom의 값이 바뀌면 구독하고 있는 컴포너트는 모두 새로운 값으로 리렌더링 된다. atom은 key와 default값을 설정해 주어야 한다. key: 해당 atom을 식별하는데 필요한 고유한 문자열이며, 프로젝트 전체에서 다른 atom, selector에 대해 고유해야 한다. default: 초기값을 설정해준다.import { atom } from \"recoil\";export const countState atom({ key: 'countState', default: 0,});⚡ Selector atom에서는 불가능한 비동기 처리와 복잡한 로직을 구현할 수 있다. selector는 세가지 값을 가진다. key: 해당 selector를 식별하는데 필요한 고유한 문자열이며, 프로제그 전체에서 다른 atom, selector에 대해 고유해야 한다. get: 파생된 상태를 반환하는 곳이며, get(countState) 처럼 countState를 get하고 있으면 countState가 바뀔 때마다 새로운 값을 리턴해준다. get()을 여러번 사용 가능하고 그중 하나라도 변하게 되면 리렌더링 된다. set: set 없이 get만 제공되면 selector는 read-only한 상태이지만 set을 제공하면 쓰기 가능한 상태를 반환한다.// atoms.tsximport { atom, selector } from \"recoil\";export const minuteState atom({ key: \"minutes\", default: 0,});export const hourSelector selector({ key: \"hours\", get: ({get}) =&gt; { const minutes = get(minuteState); return minutes / 60; }, set: ({set}, newValue) =&gt; { const minutes = Number(newValue) * 60; set(minuteState, minutes); }});// App.tsximport { useRecoilState } from \"recoil\";import { minuteState, hourSelector } from \"./atoms\";function App() { const [minutes, setMinutes] = useRecoilState(minuteState); const [hours, setHours] = useRecoilState(hourSelector); const onMinutesChange = (event: React.FormEvent&lt;HTMLInputElement&gt;) =&gt; { setMinutes(+event.currentTarget.value); // number type + } const onHoursChange = (event: React.FormEvent&lt;HTMLInputElement&gt;) =&gt; { setHours(+event.currentTarget.value); } return ( &lt;&gt; &lt;input value={minutes} onChange={onMinutesChange} type=\"number\" placeholder=\"Minutes\" /&gt; &lt;input value={hours} onChange={onHoursChange} type=\"number\" placeholder=\"Hours\" /&gt; &lt;/&gt; )}export default App;⚡ useRecoilState상태를 읽고 변경할 때 사용한다.import { atom, useRecoilState } from \"recoil\";const modeThemeAtom = atom({ key: \"modeTheme\", default: true,})function App() { const [mode, setMode] = useRecoilState(modeThemeAtom); const toggleModeAtom = () =&gt; setMode(prev =&gt; !prev); return ( &lt;button onClick={toggleModeAtom}&gt;Mode Change&lt;/button&gt; )}export default App;⚡ useRecoliValue컴포넌트에서 상태를 읽어오기만 하면될 때 사용한다.import { atom, useRecoilValue } from \"recoil\";const modeThemeAtom = atom({ key: \"modeTheme\", dafault: true,})function App() { const modeTheme = useRecoilValue(modeThemeAtom); console.log(isDark); // true return null;}export default App;⚡ useSetRecoilState상태를 변경할 때 사용한다.import { atom, useSetRecoilState } from \"recoil\";const modeThemeAtom = atom({ key: \"modeTheme\", dafault: true,})function App() { const setMode = useSetRecoilState(modeThemeAtom); const toggleModeAtom = () =&gt; setMode(prev =&gt; !prev); return &lt;button onClick={toggleModeAtom}&gt;Mode Change&lt;/button&gt;}export default App;" }, { "title": "[React] React-Query", "url": "/eehosmik.github.io/posts/react-query/", "categories": "React", "tags": "react, react-query, useQuery, react-query-devtools", "date": "2024-02-16 00:00:00 +0900", "snippet": "✨ React-Query 서버 상태를 불러오고, 캐싱하며, 지속적으로 동기화하고 업데이트 하는 작업을 도와주는 라이브러리 기존의 복잡하고 장황한 코드가 필요한 데이터 불러오기 방식과 달리 컴포넌트 내부에서 간단하고 직관적으로 API를 사용할 수 있다. 캐싱을 통해 동일한 데이터에 대한 반복적인 비동기 데이터 호출을 방지하고, 이는 불필요한 API 콜을 줄여 서버에 대한 부담을 줄인다. 특정 데이터의 복사본을 저장하여 이후 동일한 데이터의 재접근 속도를 높이는 것을 캐싱(caching)이라고 한다.⚡ useQuery const { isLoading, data } = useQuery(queryKey, queryFu)import { QueryClient, QueryClientProvider, useQuery } from \"react-query\";import { ReactQueryDevtools } from \"react-query/devtools\"; const queryClient = new QueryClient() export default function App() { return ( &lt;QueryClientProvider client={queryClient}&gt; &lt;Example /&gt; &lt;ReactQueryDevtools initialIsOpen={false} /&gt; &lt;/QueryClientProvider&gt; )} function Example() { const { isLoading, error, data } = useQuery('repoData', () =&gt; fetch('https://api.github.com/repos/tannerlinsley/react-query').then(res =&gt; res.json()) ) if (isLoading) return 'Loading...' if (error) return 'An error has occurred: ' + error.message return ( &lt;div&gt; &lt;h1&gt;{data.name}&lt;/h1&gt; &lt;p&gt;{data.description}&lt;/p&gt; &lt;strong&gt;👀 {data.subscribers_count}&lt;/strong&gt;{' '} &lt;strong&gt;✨ {data.stargazers_count}&lt;/strong&gt;{' '} &lt;strong&gt;🍴 {data.forks_count}&lt;/strong&gt; &lt;/div&gt; )}" }, { "title": "[React] React-Router-Dom Hooks", "url": "/eehosmik.github.io/posts/react-router-hooks/", "categories": "React", "tags": "react, react-router-dom, useParams, useLocation, useRouteMatch", "date": "2024-02-15 00:00:00 +0900", "snippet": "✨ useParams파라미터 값을 넘겨받을 수 있다.import { BrowserRouter, Switch, Route } from \"react-router-dom\";import Coins from \"./routes/Coins\";import Coin from \"./routes/Coin\";function Router() { return &lt;BrowserRouter&gt; &lt;Switch&gt; &lt;Route path=\"/:id\"&gt;&lt;Coin /&gt;&lt;/Route&gt; &lt;Route path=\"/\"&gt;&lt;Coins /&gt;&lt;/Route&gt; &lt;/Switch&gt; &lt;/BrowserRoter&gt;}export default Router;import { useParams } from \"react-router-dom\";function Coin() { const params = useParams(); // 파라미터 값을 변수에 저장, 해당 값은 객체 형태 // 이때 객체 프로퍼티의 key는 Route에서 설정한 path parameter // value는 path parameter에 전달된 값 // /:id에서 id가 1이라면 { id : \"1\" } // 동적 라우팅 값으로 걸어둔 이름으로 객체를 가져올 수 있다. const { id } = useParams(); // 현재 주소의 값이 http://localhost:3000/1 이라면 console.log(id); return &lt;h1&gt;path parameter: {params.id}&lt;/h1&gt; // \"1\"이 출력}export default Coin;✨ useLocation사용자가 현재 머물러 있는 페이지에 대한 정보를 알려준다.import { Link } from \"react-router-dom\"function Coins() { return &lt;Coin&gt; &lt;Link to={ pathname: `/${id}`, state: { name: \"btc\" } }&gt;Coin Name&lt;/Link&gt; &lt;/Coin&gt;}// Link to export default Coins;import { useLocation } from \"react-router-dom\";function Coin() { const { state } = useLocation(); // name: \"btc\" return &lt;h1&gt;{state.name}&lt;/h1&gt;}export default Coin;✨ useRouteMatchURL에 해당 파라미터 값이 있는지 확인한다.import { useRouteMatch } from \"react-router-dom\";function App() { const Match = useRouteMatch(\"/:id\"); console.log(Match); // true or false return null;}export default App;" }, { "title": "[React] React-Router-Dom", "url": "/eehosmik.github.io/posts/react-router/", "categories": "React", "tags": "react, react-router-dom", "date": "2024-02-14 00:00:00 +0900", "snippet": "✨ React-Router-DomSPA 방식의 리액트에서 각각의 Route(경로)에 따라 선택된 페이지를 렌더링 해주는 라이브러리 SPA(Single Page Application)은 서버에서 필요한 데이터만 비동기로 받아와서 현재 화면에 다시 렌더링 하는 방식이다. 웹 페이지를 로딩하더라도 최신 업데이트를 신속하게 반영하면서 페이지 로딩 속도를 향상시키고 트래픽을 줄여 부드러운 페이지 전환이 가능하다.⚡ Routing사용자가 요청한 경로에 맞는 콘텐츠로 이동시켜 주는 것을 라우팅(Routing)이라고 한다.⚡ BrowserRouter or HashRouterreact-router-dom의 라우터는 &lt;BrowserRouter&gt;와 &lt;HashRouter&gt; 두 가지가 있다. BrowserRouter는 HTML5의 history API를 활용하여 UI를 업데이트하고, HashRouter는 URL의 hash를 활용한 라우터이다. HashRouter는 정적인(static) 페이지에 적합하다. request와 response로 이루어지는 동적인 페이지를 제작할 때에는 BrowserRouter가 보편적으로 쓰인다.⚡ Route요청받은 pathname에 해당하는 컴포넌트를 렌더링 한다.⚡ Switch or Routespath의 충돌이 일어나지 않게 Route들을 관리한다. Swtich 내부에 Route들을 넣으면 요청에 의해 매칭되는 Route들이 다수 있을 때 제일 처음 매칭되는 Route만 선별하여 실행한다. 따라서 url 겹침이나 충돌 오류를 방지할 수 있다.⚡ Link앱 내에서 다른 경로로 이동하기 위한 컴포넌트이다. 이 컴포넌트를 사용하면 페이지를 새로 불러오는 것이 아닌 원하는 Route를 렌더링 해준다.import { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";import Coins from \"./routes/Coins\";import Coin from \"./routes/Coin\";function Router() { return ( &lt;BrowserRouter&gt; &lt;Switch&gt; &lt;Route path=\"/id\"&gt;&lt;Coin /&gt;&lt;/Route&gt; &lt;Route path=\"/\"&gt;&lt;Coins /&gt;&lt;/Route&gt; &lt;/Switch&gt; &lt;/BrowserRoter&gt; &lt;Link to={`/:id`}&gt;Coin Name&lt;/Link&gt; );}export default Router;" }, { "title": "[React] useEffect", "url": "/eehosmik.github.io/posts/react-useEffect/", "categories": "React", "tags": "react, useEffect", "date": "2024-02-09 00:00:00 +0900", "snippet": "✨ useEffect 컴포넌트가 렌더링 될 때마다 특정 작업을 실행한다. function: 해당 값이 업데이트 될 때 수행하고자 하는 함수 deps: 배열 형태이며, 검사하고자 하는 특정값 또는 빈 배열 useEffect(function, [dependencies?])import { useState, useEffect } from \"react\";function App() { const [counter, setValue] = useState(0); const [keyword, setKeyword] = useState(\"\"); const onClick = () =&gt; setValue((prev) =&gt; prev + 1); const onChange = (event) =&gt; setKeyword(event.target.value); console.log(\"I run all the time.\"); useEffect(() =&gt; { console.log(\"I run only once.\"); }, []); useEffect(() =&gt; { console.log(\"I run when 'counter' changes.\"); }, [counter]); useEffect(() =&gt; { console.log(\"I run when 'keyword' changes.\"); }, [keyword]); useEffect(() =&gt; { console.log(\"I run when 'counter&amp;keyword' changes.\"); }, [counter, keyword]); return ( &lt;div&gt; &lt;input value={keyword} onChange={onChange} type=\"text\" placeholder=\"Search here...\" /&gt; &lt;h1&gt;{counter}&lt;/h1&gt; &lt;button onClick={onClick}&gt;Click me&lt;/button&gt; &lt;/div&gt; );}export default App;⚡ Cleanup 함수import { useState, useEffect } from \"react\";function Hello() { useEffect(() =&gt; { console.log(\"hi :)\"); return () =&gt; console.log(\"bye :(\"); }, []) return &lt;h1&gt;Hello&lt;/h1&gt;}function App() { const [showing, setShowing] = useState(false); const onClick = () =&gt; setShowing((prev) =&gt; !prev); return ( &lt;div&gt; {showing ? &lt;Hello /&gt; : null} &lt;button onClick={onClick}&gt;{showing ? \"Hide\" : \"Show\"}&lt;/button&gt; &lt;/div&gt; );}export default App;" }, { "title": "[React] Props", "url": "/eehosmik.github.io/posts/react-props/", "categories": "React", "tags": "react, props", "date": "2024-02-08 00:00:00 +0900", "snippet": "✨ Props 컴포넌트에 데이터를 전달하고자 할 때 사용하며, 이렇게 전달된 값은 변수를 통해 참조할 수 있다. React에서 데이터의 흐름은 부모 컴포넌트에서 자식 컴포넌트로 전달되므로, props의 값은 해당 컴포넌트를 불러와 사용하는 부모 컴포넌트에서 설정할 수 있다.import { useState } from \"react\";function Button({ text, boolean, fontSize = 12, onClick }) { return ( &lt;button onClick={onClick} style={/*{ padding: \"10px 20px\", backgroundColor: \"black\", border: 0, color: \"white\", fontSize: fontSize, marginRight: boolean ? 5 : 0 }*/} &gt; {text} &lt;/button&gt; );}function App() { const [value, setValue] = useState(\"save\"); const changeValue = () =&gt; setValue(\"revert\"); return ( &lt;div&gt; &lt;Button text={value} boolean={true} fontSize={18} onClick={changeValue} /&gt; &lt;Button text=\"continue\" boolean={false} /&gt; &lt;/div&gt; );}export default App;" }, { "title": "[Javascript] ES6", "url": "/eehosmik.github.io/posts/javascript-es6/", "categories": "Javascript", "tags": "javascript, es6", "date": "2024-02-01 00:00:00 +0900", "snippet": "✨ Variables⚡ var function scope 코드가 길어지면 사용성을 파악하기 힘들어지며 값이 바뀔 우려가 있다. 런타임 이전에 ‘선언 단계’와 ‘초기화 단계’가 한 번에 진행된다. 이 때문에 var로 선언한 변수의 경우 호이스팅 시 undefined로 변수가 초기화 된다. 선언이 어디에 있든 런타임 이전 단계에서 먼저 실행되는 것을 호이스팅(Hoisting)이라고 한다.(var, const, let, function, class 키워드를 사용해 선언한 모든 식별자는 호이스팅 된다.)⚡ const &amp; let block scope 변수를 선언할 때 기본적으로 const를 사용한다. 재할당이 필요한 변수를 선언할 때는 let을 사용한다. ‘선언 단계’와 초기화 단계’가 따로 진행된다. 런타임 이전에 선언 단계가 먼저 실행되지만, 초기화 단계는 변수 선언문에 도달했을 때 실행되기 때문에 초기화 단계가 이루어지기 이전에 변수에 접근하려고 하면 참조 에러(Reference Error)가 발생한다. 스코프의 시작 지점부터 초기화 단계 시작 지점(변수 선언문)까지 변수를 참조 할 수 없으며, 변수를 참조할 수 없는 이 구간을 일시적 사각지대(Temporal Dead Zone)이라 부른다.⚡ function scope &amp; block scope// var 선언var greeting = \"Nice to meet you.\";var times = 1;if (times &gt; 0) { var greeting = \"I'm back.\"; console.log(greeting); // I'm back.}console.log(greeting); // I'm back.// let 선언let greeting = \"Nice to meet you.\";let times = 1;if (times &gt; 0) { let greeting = \"I'm back.\"; console.log(greeting); // I'm back.}console.log(greeting); // Nice to meet you.✨ Arrow Function// 일반 함수function nameOf(arg) {}const nameOf = function(arg) {};// 화살표 함수// 매개변수가 없는 경우const nameOf = () =&gt; console.log('sisi');nameOf();// 매개변수가 하나인 경우const sayHi = aName =&gt; \"Hello \" + aName;const sayHi = (aName = \"anon\") =&gt; \"Hello \" + aName;console.log(sayHi());// 매개변수가 여려개인 경우const numbers = (a, b) =&gt; a + b; // 간단하게 한줄로 표현할 땐 \"{}\" 없이 값이 반환console.log(numbers(1, 2));const numbers = (a, b) =&gt; { return a + b }; console.log(numbers(1, 2));const numbers = (a, b) =&gt; { a + b }; // \"{}\"를 사용했는데 return이 없을 때 console.log(numbers(1, 2)); // undefined// 객체를 반환할 때const numbers = () =&gt; ( { a: 1, b: 2, c: 3 } );consoloe.log(numbers()); // { a: 1, b: 2, c: 3 };✨ Stringsconst wrapper = document.createElement(\"div\")const friends = ['sisi', 'moon', 'capi'];const list = ` &lt;ul&gt; ${friends.map((friend) =&gt; `&lt;li&gt;${friend}&lt;/li&gt;`).join(\"\")} &lt;/ul&gt;`wrapper.innerHTML = list;// includes() : 문자열 및 배열에 특정 요소를 포함하고 있는지 판별, 결과를 true 또는 false로 반환const isEmail = email =&gt; email.includes(\"@\");console.log(isEmail(html@naver.com));// repeat() : 문자열에 주어진 횟수만큼 반복해 붙인 새로운 문자열을 반환const CC_NUMBER = \"6060\";const CC = `${\"*\".repeat(10)${CC_NUMBER}}`;console.log(CC);// startsWith() : 문자열이 특정 문자로 시작하는지 확인하여 결과를 true 또는 false로 반환// endsWith() : 문자열에서 특정 문자로 끝나는지 확인하여 결과를 true 또는 false로 반환const nameOf = \"Mr. sisi\";console.log(nameOf.startsWith(\"Mr\"));console.log(nameOf.endsWith(\"sisi\"));✨ Arrayconst friends = ['sisi', 'moon', 'capi'];// map() : 배열 내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 새로운 배열을 반환const addHeart = friends.map((friend) =&gt; friend + \"❤️\");// find() : 배열에서 함수를 만족하는 첫번째 요소를 반환. 만족하는 값이 없으면 undefined를 반환// findIndex() : 배열에서 찾은 요소의 인덱스를 반환const found = friends.find((friend) =&gt; friend.includes(\"oo\"));// filter() : 주어진 배열에서 제공된 함수에 만족하는 요소로만 필터링해 배열을 반환const filter = friends.filter((friend) =&gt; friend.includes(\"oo\")); " }, { "title": "Welcome to Jekyll!", "url": "/eehosmik.github.io/posts/welcome-to-jekyll/", "categories": "", "tags": "", "date": "2022-09-07 13:45:34 +0900", "snippet": "You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.Jekyll requires blog post files to be named according to the following format:YEAR-MONTH-DAY-title.MARKUPWhere YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.Jekyll also offers powerful support for code snippets:def print_hi(name) puts \"Hi, #{name}\"endprint_hi('Tom')#=&gt; prints 'Hi, Tom' to STDOUT.Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk." }, { "title": "Enable Google Page Views", "url": "/eehosmik.github.io/posts/enable-google-pv/", "categories": "Blogging, Tutorial", "tags": "google analytics, pageviews", "date": "2021-01-04 08:32:00 +0900", "snippet": "This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write more blogs. With that said, let’s start with the setup.Set up Google AnalyticsCreate GA account and propertyFirst, you need to set up your account on Google analytics. While you create your account, you must create your first Property as well. Head to https://analytics.google.com/ and click on Start Measuring Enter your desired Account Name and choose the desired checkboxes Enter your desired Property Name. This is the name of the tracker project that appears on your Google Analytics dashboard Enter the required information About your business Hit Create and accept any license popup to set up your Google Analytics account and create your propertyCreate Data StreamWith your property created, you now need to set up Data Stream to track your blog traffic. After you signup, the prompt should automatically take you to create your first Data Stream. If not, follow these steps: Go to Admin on the left column Select the desired property from the drop-down on the second column Click on Data Streams Add a stream and click on Web Enter your blog’s URLIt should look like this:Now, click on the new data stream and grab the Measurement ID. It should look something like G-V6XXXXXXXX. Copy this to your _config.yml file:google_analytics: id: 'G-V6XXXXXXX' # fill in your Google Analytics ID # Google Analytics pageviews report settings pv: proxy_endpoint: # fill in the Google Analytics superProxy endpoint of Google App Engine cache_path: # the local PV cache data, friendly to visitors from GFW regionWhen you push these changes to your blog, you should start seeing the traffic on your Google Analytics. Play around with the Google Analytics dashboard to get familiar with the options available as it takes like 5 mins to pick up your changes. You should now be able to monitor your traffic in real time.Setup Page ViewsThere is a detailed tutorial available to set up Google Analytics superProxy. But, if you are interested to just quickly get your Chirpy-based blog display page views, follow along. These steps were tested on a Linux machine. If you are running Windows, you can use the Git bash terminal to run Unix-like commands.Setup Google App Engine Visit https://console.cloud.google.com/appengine Click on Create Application Click on Create Project Enter the name and choose the data center close to you Select Python language and Standard environment Enable billing account. Yeah, you have to link your credit card. But, you won’t be billed unless you exceed your free quota. For a simple blog, the free quota is more than sufficient. Go to your App Engine dashboard on your browser and select API &amp; Services from the left navigation menu Click on Enable APIs and Services button on the top Enable the following APIs: Google Analytics API On the left, Click on OAuth Consent Screen and accept Configure Consent Screen. Select External since your blog is probably hosted for the public. Click on Publish under Publishing Status Click on Credentials on the left and create a new OAuth Client IDs credential. Make sure to add an entry under Authorized redirect URIs that matches: https://&lt;project-id&gt;.&lt;region&gt;.r.appspot.com/admin/auth Note down the Your Client ID and Your Client Secret. You’ll need this in the next section. Download and install the cloud SDK for your platform: https://cloud.google.com/sdk/docs/quickstart Run the following commands: [root@bc96abf71ef8 /]# gcloud init~snip~Go to the following link in your browser: https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=XYZ.apps.googleusercontent.com&amp;redirect_uri=ABCDEFGEnter verification code: &lt;VERIFICATION CODE THAT YOU GET AFTER YOU VISIT AND AUTHENTICATE FROM THE ABOVE LINK&gt;You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1[root@bc96abf71ef8 /]# gcloud info# Your selected project info should be displayed here Setup Google Analytics superProxy Clone the Google Analytics superProxy project on Github: https://github.com/googleanalytics/google-analytics-super-proxy to your local. Remove the first 2 lines in the src/app.yaml file: - application: your-project-id- version: 1 In src/config.py, add the OAUTH_CLIENT_ID and OAUTH_CLIENT_SECRET that you gathered from your App Engine Dashboard. Enter any random key for XSRF_KEY, your config.py should look similar to this #!/usr/bin/python2.7__author__ = 'pete.frisella@gmail.com (Pete Frisella)'# OAuth 2.0 Client SettingsAUTH_CONFIG = { 'OAUTH_CLIENT_ID': 'YOUR_CLIENT_ID', 'OAUTH_CLIENT_SECRET': 'YOUR_CLIENT_SECRET', 'OAUTH_REDIRECT_URI': '%s%s' % ( 'https://chirpy-test-XXXXXX.ue.r.appspot.com', '/admin/auth' )}# XSRF SettingsXSRF_KEY = 'OnceUponATimeThereLivedALegend' You can configure a custom domain instead of https://PROJECT_ID.REGION_ID.r.appspot.com.But, for the sake of keeping it simple, we will be using the Google provided default URL. From inside the src/ directory, deploy the app [root@bc96abf71ef8 src]# gcloud app deployServices to deploy:descriptor: [/tmp/google-analytics-super-proxy/src/app.yaml]source: [/tmp/google-analytics-super-proxy/src]target project: [chirpy-test-XXXX]target service: [default]target version: [VESRION_NUM]target url: [https://chirpy-test-XXXX.ue.r.appspot.com]Do you want to continue (Y/n)? YBeginning deployment of service [default]...╔════════════════════════════════════════════════════════════╗╠═ Uploading 1 file to Google Cloud Storage ═╣╚════════════════════════════════════════════════════════════╝File upload done.Updating service [default]...done.Setting traffic split for service [default]...done.Deployed service [default] to [https://chirpy-test-XXXX.ue.r.appspot.com]You can stream logs from the command line by running:$ gcloud app logs tail -s defaultTo view your application in the web browser run:$ gcloud app browse Visit the deployed service. Add a /admin to the end of the URL. Click on Authorize Users and make sure to add yourself as a managed user. If you get any errors, please Google it. The errors are self-explanatory and should be easy to fix. If everything went good, you’ll get this screen:Create Google Analytics QueryHead to https://PROJECT_ID.REGION_ID.r.appspot.com/admin and create a query after verifying the account. GA Core Reporting API query request can be created in Query Explorer.The query parameters are as follows: start-date: fill in the first day of blog posting end-date: fill in today (this is a parameter supported by GA Report, which means that it will always end according to the current query date) metrics: select ga:pageviews dimensions: select ga:pagePathIn order to reduce the returned results and reduce the network bandwidth, we add custom filtering rules 1: filters: fill in ga:pagePath=~^/posts/.*/$;ga:pagePath!@=. Among them, ; means using logical AND to concatenate two rules. If the site.baseurl is specified, change the first filtering rule to ga:pagePath=~^/BASE_URL/posts/.*/$, where BASE_URL is the value of site.baseurl. After Run Query, copy the generated contents of API Query URI at the bottom of the page and fill in the Encoded URI for the query of SuperProxy on GAE.After the query is saved on GAE, a Public Endpoint (public access address) will be generated, and we will get the query result in JSON format when accessing it. Finally, click Enable Endpoint in Public Request Endpoint to make the query effective, and click Start Scheduling in Scheduling to start the scheduled task.Configure Chirpy to Display Page ViewOnce all the hard part is done, it is very easy to enable the Page View on Chirpy theme. Your superProxy dashboard should look something like below and you can grab the required values.Update the _config.yml file of Chirpy project with the values from your dashboard, to look similar to the following:google_analytics: id: 'G-V6XXXXXXX' # fill in your Google Analytics ID pv: proxy_endpoint: 'https://PROJECT_ID.REGION_ID.r.appspot.com/query?id=&lt;ID FROM SUPER PROXY&gt;' cache_path: # the local PV cache data, friendly to visitors from GFW regionNow, you should see the Page View enabled on your blog.Reference Google Analytics Core Reporting API: Filters &#8617; " }, { "title": "Customize the Favicon", "url": "/eehosmik.github.io/posts/customize-the-favicon/", "categories": "Blogging, Tutorial", "tags": "favicon", "date": "2019-08-11 01:34:00 +0900", "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files: browserconfig.xml site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files: File(s) From Online Tool From Chirpy *.PNG ✓ ✗ *.ICO ✓ ✗ ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition." }, { "title": "Getting Started", "url": "/eehosmik.github.io/posts/getting-started/", "categories": "Blogging, Tutorial", "tags": "getting started", "date": "2019-08-09 21:55:00 +0900", "snippet": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll, and Bundler. In addition, Git is also required to be installed.InstallationCreating a New SiteThere are two ways to create a new repository for this theme: Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing. Forking on GitHub - Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterCreate a new repository from the Chirpy Starter and name it &lt;GH_USERNAME&gt;.github.io, where GH_USERNAME represents your GitHub username.Option 2. Forking on GitHubFork Chirpy on GitHub and rename it to &lt;GH_USERNAME&gt;.github.io. Please note that the default branch code is in development. If you want the site to be stable, please switch to the latest tag and start writing.And then execute:$ bash tools/init.sh If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will: Removes some files or directories from your repository: .travis.yml files under _posts If the option --no-gh is provided, the directory .github will be deleted. Otherwise, set up the GitHub Action workflow by removing the extension .hook of .github/workflows/pages-deploy.yml.hook, and then remove the other files and directories in the folder .github. Removes item Gemfile.lock from .gitignore. Creates a new commit to save the changes automatically.Installing DependenciesBefore running for the first time, go to the root directory of your site, and install dependencies as follows:$ bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options: url avatar timezone langCustoming StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/style.scss to the same path on your Jekyll site, and then add the custom style at the end of the style file.Starting from v4.1.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, create a new file _sass/variables-hook.scss and assign new values to the target variable in it.Customing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined by file _data/assets/cross_origin.yml, and you can replace some of them according to the network conditions in the region where your website is published.Also, if you’d like to self-host the static assets, please refer to the chirpy-static-assets.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sOr run the site on Docker with the following command:$ docker run -it --rm \\ --volume=\"$PWD:/srv/jekyll\" \\ -p 4000:4000 jekyll/jekyll \\ jekyll serveAfter a while, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using Github ActionsFor security reasons, GitHub Pages build runs on safe mode, which restricts us from using plugins to generate additional page files. Therefore, we can use GitHub Actions to build the site, store the built site files on a new branch, and use that branch as the source of the GitHub Pages service.Quickly check the files needed for GitHub Actions build: Ensure your Jekyll site has the file .github/workflows/pages-deploy.yml. Otherwise, create a new one and fill in the contents of the sample file, and the value of the on.push.branches should be the same as your repo’s default branch name. Ensure your Jekyll site has file tools/deploy.sh. Otherwise, copy it from here to your Jekyll site. Furthermore, if you have committed Gemfile.lock to the repo, and your runtime system is not Linux, don’t forget to update the platform list in the lock file: $ bundle lock --add-platform x86_64-linux After the above steps, rename your repository to &lt;GH_USERNAME&gt;.github.io on GitHub.Now publish your Jekyll site by: Push any commit to remote to trigger the GitHub Actions workflow. Once the build is complete and successful, a new remote branch named gh-pages will appear to store the built site files. Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar, and then in the section Source of GitHub Pages, select the /(root) directory of branch gh-pages as the publishing source. Remember to click Save before leaving. Visit your website at the address indicated by GitHub. Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:$ JEKYLL_ENV=production bundle exec jekyll bOr build the site on Docker:$ docker run -it --rm \\ --env JEKYLL_ENV=production \\ --volume=\"$PWD:/srv/jekyll\" \\ jekyll/jekyll \\ jekyll buildUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server.UpgradingIt depends on how you use the theme: If you are using the theme gem (there will be gem \"jekyll-theme-chirpy\" in the Gemfile), editing the Gemfile and update the version number of the theme gem, for example: - gem \"jekyll-theme-chirpy\", \"~&gt; 3.2\", \"&gt;= 3.2.1\"+ gem \"jekyll-theme-chirpy\", \"~&gt; 3.3\", \"&gt;= 3.3.0\" And then execute the following command: $ bundle update jekyll-theme-chirpy As the version upgrades, the critical files (for details, see the Startup Template) and configuration options will change. Please refer to the Upgrade Guide to keep your repo’s files in sync with the latest version of the theme. If you forked from the source project (there will be gemspec in the Gemfile of your site), then merge the latest upstream tags into your Jekyll site to complete the upgrade.The merge is likely to conflict with your local modifications. Please be patient and careful to resolve these conflicts. " }, { "title": "Writing a New Post", "url": "/eehosmik.github.io/posts/write-a-new-post/", "categories": "Blogging, Tutorial", "tags": "writing", "date": "2019-08-08 15:10:00 +0900", "snippet": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] # TAG names should always be lowercase--- The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Add author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one.)&lt;author_id&gt;: name: &lt;full name&gt; twitter: &lt;twitter_of_author&gt; url: &lt;homepage_of_author&gt;And then set up the custom author in the post’s YAML block:---author: &lt;author_id&gt;--- Another benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image:![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right. Once the position is specified, the image caption should not be added. Normal position Image will be left aligned in below sample: ![Desktop View](/assets/img/sample/mockup.png){: .normal } Float to the left ![Desktop View](/assets/img/sample/mockup.png){: .left } Float to the right ![Desktop View](/assets/img/sample/mockup.png){: .right } ShadowThe screenshots of the program window can be considered to show the shadow effect, and the shadow will be visible in the light mode:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&lt;img src=\"https://cdn.com/path/to/flower.png\" alt=\"The flower\"&gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&lt;img src=\"/img/path/flower.png\" alt=\"The flower\"&gt;Preview ImageIf you want to add an image to the top of the post contents, specify the attribute path, width, height, and alt for the image:---image: path: /path/to/image/file width: 1000 # in pixels height: 400 # in pixels alt: image alternative text---Except for alt, all other options are necessary, especially the width and height, which are related to user experience and web page loading performance. The above section “Size” also mentions this.Starting from Chirpy v5.0.0, the attributes height and width can be abbreviated: height → h, width → w. In addition, the img_path can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name.Starting from Chirpy v5.2.0, the property for the preview image is changed to image.path. If upgrading the theme from a prior version, you will have to update posts’ metadata to use new image property.Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Hightlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value``` The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %} This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts." }, { "title": "Text and Typography", "url": "/eehosmik.github.io/posts/text-and-typography/", "categories": "Blogging, Tutorial", "tags": "typography", "date": "2019-08-08 12:33:00 +0900", "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden daffodils;Beside the lake, beneath the trees,Fluttering and dancing in the breeze.ListsOrdered list Firstly Secondly ThirdlyUnordered list Chapter Section Paragraph Task list TODO Completed Defeat COVID-19 Vaccine production Economic recovery People smile again Description list Sun the star around which the earth orbits Moon the natural satellite of the earth, visible by reflected light from the sunBlock Quote This line shows the block quote.Prompts An example showing the tip type prompt. An example showing the info type prompt. An example showing the warning type prompt. An example showing the danger type prompt.Tables Company Contact Country Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Images Default (with caption)Full screen width and center alignment Shadowshadow effect (visible in light mode) Left aligned Float to left “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Float to right “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Mermaid SVG gantt title Adding GANTT diagram functionality to mermaid apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1dMathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blockCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashShellif [ $? -ne 0 ]; then echo \"The command was not successful.\"; #do the needful / exitfi;Specific filename@import \"colors/light-typography\", \"colors/dark-typography\"Reverse Footnote The footnote source &#8617; The 2nd footnote source &#8617; " } ]
